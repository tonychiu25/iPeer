<?phpclass FacultyCoursesAccessControlComponent extends Object {  var $FacultyAcoUser;  var $FacultyAco;    function __construct() {  	$this->FacultyAcoUser = ClassRegistry::init('FacultyAcoUser');  	$this->FacultyAco = ClassRegistry::init('FacultyAco');  	$this->DepartmentUser = ClassRegistry::init('DepartmentUser');  }    function grantAccessPermission($facultyAcoId, $deptId) {	$data['faculty_aco_id'] = $facultyAcoId;	$data['dept_id'] = $deptId;	$data['_create'] = 1;	$data['_read'] = 1;	$data['_update'] = 1;	$data['_delete'] = 1;	// Saves only if the parent node has been denied access permission	$this->FacultyAcoUser->save($data);	/*$parentAccessPermission = $this->_getParentsAccessPermission($facultyAcoId, $deptId);	if(!$parentAccessPermission) {	  return true;	} else {	  return false;	}*/  }    function denyAccessPermission($facultyAcoId, $deptId) {
    $data['faculty_aco_id'] = $facultyAcoId;    $data['user_id'] = $userId;
	$data['_create'] = -1;	$data['_read'] = -1;	$data['_update'] = -1;	$data['_delete'] = -1;  	// Save only if it's the highest deny permission  	$this->FacultyAcoUser->save($data);	/*$parentAccessPermission = $this->_getParentsAccessPermission($facultyAcoId, $deptId);	if($parentAccessPermission) {	  return true;	} else {	  return false;	}*/  }  function _getParentsAccessPermission($childNodeId, $userId) {
  	$parentNode = $this->FacultyAco->getparentnode($childNodeId);  	$accessible = null;  	// current childNode is already root; else has parent.  	if(empty($parentNode)) {	  $rootPermission = $this->FacultyAcoUser->getAccessPermissionByFacultyAcoIdUserId($childNodeId, $deptId);	  $accessible = ($rootPermission['FacultyAcoUser']['_read'] == 1 ? true : false);  	} else {  	  $parentPermission = $this->FacultyAcoUser->getAccessPermissionByFacultyAcoIdUserId($parentNode['FacultyAco']['id'], $deptId);  	  $accessible = ($parentPermission['FacultyAcoUser']['_read'] == 1 ? true : false);   	}  	return $accessible;  }    function filterCourseList($deptCourseList=array(), &$getParamForList) {  	$unfilteredCourseList = $getParamForList['data']['entries'];  	$filteredCourseList = array();  	foreach($unfilteredCourseList as $course) {  	  if(in_array($course['Course']['id'], $deptCourseList)) {  	  	array_push($filteredCourseList, $course);  	  }  	}  	$getParamForList['data']['entries'] = $filteredCourseList;  }}?>